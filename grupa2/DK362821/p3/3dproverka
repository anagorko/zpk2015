#include<iostream>
#include<math.h>
using namespace std;

class Point {
      //dodamy koordynaty naszych zmiennych, tylko pytanie, czy tu czy nie 
    long double x, y, z;

public:
    Point() {}
    Point(long double _x, long double _y, long double _z)    {
        x = _x;
        y = _y;
        z = _z;
      }

    ~Point() {}

      void setX(long double _x) { x = _x; } //wywolanie i ustawienie koordynaty X;
      void setY(long double _y) { y = _y; } //wywolanie i ustawienie koordynaty Y;
      void setZ(long double _z) { z = _z; } //wywolanie i ustrawienie koordynaty Z;

        double getX() { return x; } //tu zwracamy zawartosc koordynaty
        double getY() { return y; }
        double getZ() { return z; }

          double distanceTo(Point p) {  // ile mamy dystansu pomiedzy koordynatami

            return sqrt((x - p.getX())*(x - p.getX())+ (y- p.getY())* (y- p.getY())+ (z- p.getZ())*(z - p.getZ()));
          }

    friend istream& operator>>(istream&, Point&);
};

ostream& operator << (ostream &o, Point p) {
  o << "{" << p.getX() << "," << p.getY() << "," << p.getZ() << "}"; //ustawiamy koordynaty X,Y,Z za pomoca poprzedniej funkcji
    return o;
}

istream& operator>>(istream &i, Point &p) {
    i >> p.x;
    i >> p.y;
    i >> p.z;
      return i;
}


double area(Point a, Point b, Point c) {
    double ab = a.distanceTo(b);
    double bc = b.distanceTo(c);
    double ac = a.distanceTo(c);
    double p = (ab + bc + ac) / 2.0;
    return sqrt(p * (p - ab) * (p - ac) * (p - bc));
}

int main() {
    Point p;
    Point q;
    Point r;
      cout << "Podaj wspolrzedne punktu p: ";
      cin >> p;
      cout << "Podaj wspolrzedne punktu q: ";
      cin >> q;
      cout << "Podaj wspolrzedne punktu r: ";
      cin >> r;

    cout << "Punkty: " << p << " " << q << " " << r << endl;
    cout << "Pole: " << area(p,q,r) << endl;

    return 0;
}
